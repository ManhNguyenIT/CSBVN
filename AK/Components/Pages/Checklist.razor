<!-- Checklist.razor -->
@using AK.Services
@using AK.Enums
@page "/check"

@inject IDataSendService dataSender
<PageTitle>
    Kiểm tra, thông báo tình trạng các mặt bia tại các Dải
</PageTitle>

<!-- Bố cục ngoài cùng với hai hàng -->
<div class="w-100 h-100 d-grid" style="grid-template-rows: 1fr auto;">
    <div class="m-2 text-center">
        <span class="p-2 bg-warning fw-500 fs-5 text-uppercase">
            Kiểm tra, thông báo tình trạng các mặt bia tại các Dải
        </span>
    </div>
    <div class="d-grid" style="grid-template-columns: 1fr 1fr 1fr;">
        <div class="mt-auto">
            <img style="width: -webkit-fill-available; height:120px;" src="images/boat.png" />
        </div>
        <div class="d-flex flex-column justify-content-center align-items-center">
            <button class="btn rounded-circle p-0" style="border: none;">
                <img style="height:100px" src="images/blue_large_button.png" />
            </button>
            <span class="fs-5 fw-500">
                Kiểm tra hoạt động của hệ thống
            </span>
        </div>
        <div class="d-flex justify-content-center align-items-center">
            <img style="width: fit-content; height:120px;" src="images/target.png" />
        </div>
    </div>
    <!-- Hàng đầu tiên: Phần nội dung chính với hai cột -->
    <div class="d-grid" style="grid-template-columns: 1fr 1fr; gap: 16px;">
        <!-- Thẻ card đầu tiên -->
        <div class="d-flex flex-column">
            <MudTable Items="@data" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Dải
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Bia số
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Tình trạng HĐ
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (data.IndexOf(@context) == 0 || data[data.IndexOf(@context) - 1].Range != @context.Range)
                    {
                        <MudTd DataLabel="Dải" RowSpan="@data.Count(x => x.Range == @context.Range)" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.Range</MudTd>
                    }
                    <MudTd DataLabel="Bia số" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.BiaSo</MudTd>
                    <MudTd DataLabel="Tình trạng HĐ" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.TinhTrang</MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="@data" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Dải
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Bia số
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Tình trạng HĐ
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (data.IndexOf(@context) == 0 || data[data.IndexOf(@context) - 1].Range != @context.Range)
                    {
                        <MudTd DataLabel="Dải" RowSpan="@data.Count(x => x.Range == @context.Range)" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.Range</MudTd>
                    }
                    <MudTd DataLabel="Bia số" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.BiaSo</MudTd>
                    <MudTd DataLabel="Tình trạng HĐ" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.TinhTrang</MudTd>
                </RowTemplate>
            </MudTable>
        </div>

        <!-- Thẻ card thứ hai với video -->
        <div class="d-flex flex-column">
            <MudTable Items="@data" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Dải
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Bia số
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Tình trạng HĐ
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (data.IndexOf(@context) == 0 || data[data.IndexOf(@context) - 1].Range != @context.Range)
                    {
                        <MudTd DataLabel="Dải" RowSpan="@data.Count(x => x.Range == @context.Range)" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.Range</MudTd>
                    }
                    <MudTd DataLabel="Bia số" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.BiaSo</MudTd>
                    <MudTd DataLabel="Tình trạng HĐ" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.TinhTrang</MudTd>
                </RowTemplate>
            </MudTable>
            <MudTable Items="@data" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Dải
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Bia số
                    </MudTh>
                    <MudTh Style="color: white; font-weight: bold; background-color: #4472C4; text-align: center; font-size: 18px; padding: 8px;">
                        Tình trạng HĐ
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (data.IndexOf(@context) == 0 || data[data.IndexOf(@context) - 1].Range != @context.Range)
                    {
                        <MudTd DataLabel="Dải" RowSpan="@data.Count(x => x.Range == @context.Range)" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.Range</MudTd>
                    }
                    <MudTd DataLabel="Bia số" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.BiaSo</MudTd>
                    <MudTd DataLabel="Tình trạng HĐ" Style="text-align: center; font-size: 16px; vertical-align: middle; padding: 8px;">@context.TinhTrang</MudTd>
                </RowTemplate>
            </MudTable>
        </div>

    </div>
</div>

@code {
    public class TrangThaiKetNoi
    {
        public int Id { get; set; }
        public bool? Status { get; set; }
    }
    private List<RowData> data = new()
    {
        new RowData { Range = "Dải 1", BiaSo = "Bia số 10", TinhTrang = "Bình thường" },
        new RowData { Range = "Dải 1", BiaSo = "Bia số 7e 01", TinhTrang = "Bình thường" },
        new RowData { Range = "Dải 1", BiaSo = "Bia số 6b", TinhTrang = "Bình thường" },
        new RowData { Range = "Dải 1", BiaSo = "Bia số 7e 02", TinhTrang = "Bình thường" }
    };

    private class RowData
    {
        public string Range { get; set; }
        public string BiaSo { get; set; }
        public string TinhTrang { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataSender.RemoteStateReceived += HandleStateReceived;
        dataSender.LeakStateReceived += HandleLeakStateReceived;
    }

    private void HandleStateReceived(byte[] data)
    {
        _ = InvokeAsync(() =>
        {
            var remoteAddress = data[0];
            switch (remoteAddress)
            {
                case (byte)RemoteAddress.Main:
                    // {
                    //     for (int i = 0; i < 8; i++)
                    //     {
                    //         // Tạo mask với bit 1 tại vị trí i
                    //         var matChanChinh = MatHungDanChinh.FirstOrDefault(c => c.Id == (i + 1));
                    //         if (matChanChinh != null)
                    //         {
                    //             byte mask = (byte)(1 << i);
                    //             if ((data[2] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                    //             {
                    //                 matChanChinh.State = "Bị chập";
                    //             }
                    //             else
                    //             {
                    //                 matChanChinh.State = "Tốt";
                    //             }
                    //         }

                    //     }
                    // }
                    break;
                case (byte)RemoteAddress.Sub:
                    // {
                    //     for (int i = 0; i < 8; i++)
                    //     {
                    //         byte mask = (byte)(1 << i); // Tạo mask với bit 1 tại vị trí i
                    //         var matChanPhu = MatHungDanPhu.FirstOrDefault(c => c.Id == (i + 9));
                    //         if (matChanPhu != null)
                    //         {
                    //             if ((data[2] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                    //             {
                    //                 matChanPhu.State = "Bị chập";
                    //             }
                    //             else
                    //             {
                    //                 matChanPhu.State = "Tốt";
                    //             }

                    //         }
                    //     }
                    // }
                    break;
                default:
                    break;

            }
            StateHasChanged();
        });
    }

    private void HandleLeakStateReceived(byte[] data)
    {
        _ = InvokeAsync(() =>
        {
            var remoteAddress = data[0];
            // switch (remoteAddress)
            // {
            //     case (byte)RemoteAddress.Main:
            //         {
            //             for (int i = 0; i < 8; i++)
            //             {
            //                 // Tạo mask với bit 1 tại vị trí i
            //                 var matChanChinh = DanhSachTrangThaiKetNoi.FirstOrDefault(c => c.Id == (i + 1));
            //                 if (matChanChinh != null)
            //                 {
            //                     byte mask = (byte)(1 << i);
            //                     if ((data[1] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
            //                     {
            //                         matChanChinh.State = "Bị chập";
            //                     }
            //                     else
            //                     {
            //                         matChanChinh.State = "Bình thường";
            //                     }

            //                 }

            //             }
            //         }
            //         break;
            //     case (byte)RemoteAddress.Sub:
            //         // {
            //         //     for (int i = 0; i < 8; i++)
            //         //     {
            //         //         byte mask = (byte)(1 << i); // Tạo mask với bit 1 tại vị trí i
            //         //         var matChanPhu = MatChanDanPhu.FirstOrDefault(c => c.Id == (i + 9));
            //         //         if (matChanPhu != null)
            //         //         {
            //         //             if ((data[1] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
            //         //             {
            //         //                 matChanPhu.State = "Bị chập";
            //         //             }
            //         //             else
            //         //             {
            //         //                 matChanPhu.State = "Bình thường";
            //         //             }

            //         //         }
            //         //     }
            //         // }
            //         break;
            //     default:
            //         break;

            // }
            StateHasChanged();
        });
    }

    private List<TrangThaiKetNoi> DanhSachTrangThaiKetNoi = new()
    {
        new TrangThaiKetNoi{ Id = 1, Status = true},
        new TrangThaiKetNoi{ Id = 2, Status = false},
        new TrangThaiKetNoi{ Id = 3, Status = null},
        new TrangThaiKetNoi{ Id = 4, Status = true},
    };

    private void CheckClick()
    {
        dataSender.RemoteUpdateStatus();
    }
}
