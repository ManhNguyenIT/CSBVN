@using MARM.Services
@inject NavigationManager naviManger
@inject IPageNavigationService pageNavi
@inject IComDataService comService
@inject IDataSendService dataSender

<div>
    <MudIconButton @onclick="NavigateBack" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" />
</div>
<div class="d-flex flex-row align-items-center">
    <div class="nav-item">
        <NavLink @onclick="DashboardClick" class="nav-link" href="/dashboard">
            <span class="mdi mdi-view-dashboard mdi-24px" aria-hidden="true"></span> Dashboard
        </NavLink>
    </div>
    <div class="nav-item">
        <NavLink @onclick="SettingClick" class="nav-link" href="/setting">
            <span class="mdi mdi-cog mdi-24px" aria-hidden="true"></span> Setting
        </NavLink>
    </div>
    <div class="nav-item">
        <NavLink @onclick="CheckClick" class="nav-link" href="/checklist">
            <span class="mdi mdi-playlist-check mdi-24px" aria-hidden="true"></span> Kiểm tra hệ thống
        </NavLink>
    </div>
    <div class="nav-item">
        <NavLink @onclick="DataClick" class="nav-link" href="/navalunits">
            <span class="mdi mdi-ship-wheel mdi-24px" aria-hidden="true"></span> Quản lý đơn vị
        </NavLink>
    </div>
    @*           <div class="nav-item">
    <NavLink @onclick="ComSettingClick" class="nav-link" href="/connection-setting">
    <span class="mdi mdi-ship-wheel mdi-24px" aria-hidden="true"></span> Cài đặt cổng COM
    </NavLink>
    </div> *@
    <!-- Thêm nút close -->
    <div class="nav-item">
        <MudIconButton @onclick="CloseApp" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
    </div>
</div>

<div>
    <MudIconButton @onclick="NavigateForward" Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" />
</div>

@code {
    private List<string> navLinks = new List<string> { "dashboard", "setting", "checklist", "navalunits" };
    private List<int> outputPin = new List<int> { 4, 3, 2, 1 };
    private int currentLinkIndex = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        pageNavi.PageChanged += HandlePageChanged;
        pageNavi.TotalPage = 4;
        if (comService.IsConnected())
        {
            pageNavi.NavigateTo(0);
        }

        else
            pageNavi.NavigateTo(1);
    }

    private void HandlePageChanged(int pageIndex)
    {
        _ = InvokeAsync(() =>
        {
            NavigateToLink(navLinks[pageIndex]);
            // if(pageIndex == 0) dataSender.RemoteUpdateStatus();
            StateHasChanged();
        });
    }

    private void NavigateBack()
    {
        pageNavi.NavigateBack();
    }

    private void NavigateForward()
    {
        pageNavi.NavigateForward();
    }

    private void NavigateToLink(string link)
    {
        currentLinkIndex = navLinks.IndexOf(link);
        naviManger.NavigateTo(link);
    }

    private void ComSettingClick()
    {

    }

    private void CloseApp()
    {
        System.Environment.Exit(0);
    }

    public void Dispose()
    {
        pageNavi.PageChanged -= HandlePageChanged;
    }
    private void DataClick()
    {
        pageNavi.NavigateTo(3);
    }
    private void DashboardClick()
    {
        pageNavi.NavigateTo(0);

    }
    private void SettingClick()
    {
        pageNavi.NavigateTo(1);

    }
    private void CheckClick()
    {
        pageNavi.NavigateTo(2);

    }
}

